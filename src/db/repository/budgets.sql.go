// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: budgets.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addBudget = `-- name: AddBudget :exec
insert into Budgets(name, start_date, end_date, household_id)
values ($1, $2, $3, $4)
`

type AddBudgetParams struct {
	Name        string      `json:"name"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	HouseholdID int32       `json:"household_id"`
}

func (q *Queries) AddBudget(ctx context.Context, arg AddBudgetParams) error {
	_, err := q.db.Exec(ctx, addBudget,
		arg.Name,
		arg.StartDate,
		arg.EndDate,
		arg.HouseholdID,
	)
	return err
}

const getAllBudgets = `-- name: GetAllBudgets :many
select id, name, start_date, end_date, household_id from Budgets
`

func (q *Queries) GetAllBudgets(ctx context.Context) ([]Budget, error) {
	rows, err := q.db.Query(ctx, getAllBudgets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Budget
	for rows.Next() {
		var i Budget
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.StartDate,
			&i.EndDate,
			&i.HouseholdID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
